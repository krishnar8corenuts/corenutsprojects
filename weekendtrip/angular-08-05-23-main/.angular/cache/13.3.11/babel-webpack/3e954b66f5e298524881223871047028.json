{"ast":null,"code":"import { saveAs } from 'file-saver';\nimport { Register } from \"./login.model\";\nimport { Traveller } from \"./traveller.model\";\nimport Swal from 'sweetalert2';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./weekend.restdata\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@auth0/angular-jwt\";\nexport let WeekendRepository = /*#__PURE__*/(() => {\n  class WeekendRepository {\n    //* Storing the list of City objects in local arry\n    constructor(dataSource, snackBar, router, jwtHelper) {\n      this.dataSource = dataSource;\n      this.snackBar = snackBar;\n      this.router = router;\n      this.jwtHelper = jwtHelper;\n      this.currentuserrole = this.getRole();\n      this.showHeader = true;\n      this.showFooter = true;\n      this.loginStatus = this.isloggedin();\n      this.loginStatusSubject = new Subject();\n      this.logInSwap = false;\n      this.show = true; //make it false for admin\n\n      this.showsucessfull = false;\n      this.noofpassengers = 0;\n      this.cities = [];\n      this.travellers = [];\n      this.packages = [];\n      this.places = [];\n      this.users = [];\n      this.emailarr = [];\n      this.selectedcity = \"\";\n      this.selectedpack = \"\";\n      this.bookingHistoryDetails = [];\n      this.currentUser = new Register(\"\", \"\", \"\", \"\", \"\", \"\", 0, \"\", 0);\n      this.userId = 0;\n      this.totalprice = 0;\n      this.currentTraveller = new Traveller(0, \"\", new Date(), new Date(), \"\", 0, [], new Date(), \"\", \"\");\n      this.traveller2 = new Traveller(0, \"\", new Date(), new Date(), \"\", 0, [], new Date(), \"\", \"\");\n      this.coupon = [];\n      this.cityrefid = -1;\n      this.pacrefid = -1;\n      dataSource.getCities().subscribe(data => {\n        console.log(data);\n        this.cities = data;\n      });\n      dataSource.getPackages().subscribe(data => {\n        console.log(data);\n        this.packages = data;\n      });\n      dataSource.getTravellers().subscribe(data => {\n        console.log(data);\n        this.travellers = data;\n        console.log(this.travellers);\n      });\n      dataSource.getUsers().subscribe(data => {\n        console.log(data, \"users\");\n        this.users = data;\n        this.emailarr = this.users.map(e => e.email);\n      });\n      dataSource.getuserarray().subscribe(data => {\n        console.log(data, \"users\");\n        this.emailarr = data;\n      });\n      dataSource.getCoupons().subscribe(data => {\n        console.log(data);\n        this.coupon = data;\n        console.log(this.coupon);\n      });\n    }\n\n    getRole() {\n      if (this.getUser() != null) {\n        console.log(this.getUser().role);\n        console.log(this.getUser());\n        return this.getUser().role;\n      } else return \"\";\n    }\n\n    isloggedin() {\n      let token = localStorage.getItem(\"token\");\n      console.log(token);\n\n      if (token == '' || token == undefined || token == null) {\n        return false;\n      } // else if(){\n\n\n      if (this.jwtHelper.isTokenExpired(token)) {\n        localStorage.clear();\n        return false;\n      } // }\n\n\n      return true;\n    }\n\n    getTravellers() {\n      console.log(this.travellers);\n      return this.travellers;\n    }\n\n    getPackagesBycityId(cityid) {\n      var _a;\n\n      return (_a = this.cities.find(e => e.cityId == cityid)) === null || _a === void 0 ? void 0 : _a.packages;\n    } // generatePdfAfterPayment()\n\n\n    getUser() {\n      let userStr = localStorage.getItem(\"user\");\n\n      if (userStr != null) {\n        return JSON.parse(userStr);\n      } else return null;\n    }\n\n    authorize(formdetails) {\n      console.log(formdetails);\n      console.log(this.show);\n      localStorage.clear();\n      this.dataSource.login(formdetails).subscribe(data => {\n        console.log(data);\n        console.log(data.user);\n        this.userId = data.user.id;\n        this.show = true;\n        this.logInSwap = true; //not needed\n\n        this.currentUser = this.getUser(); //stored in local storage\n\n        console.log(data.user);\n        console.log(JSON.stringify(data.user));\n        localStorage.setItem(\"user\", JSON.stringify(data.user));\n        localStorage.setItem(\"token\", data.token);\n        this.currentuserrole = this.getRole(); //snackbar logged in\n\n        this.snackBar.open(\"Login sucessfull !\", \"\", {\n          panelClass: ['mat-toolbar', 'mat-primary'],\n          duration: 3000,\n          verticalPosition: 'bottom',\n          horizontalPosition: 'center'\n        }); // //not needed instead create a method by get from local storage\n        // this.currentuserrole=this.getUser().role\n      }, error => {\n        console.log(error);\n        this.snackBar.open(\"Invalid Login !\", \"\", {\n          panelClass: ['mat-toolbar', 'mat-warn'],\n          duration: 3000,\n          verticalPosition: 'bottom',\n          horizontalPosition: 'center'\n        });\n      });\n    }\n\n    register(registerdetails) {\n      registerdetails.status = \"active\";\n      let name = registerdetails.email;\n      this.dataSource.register(registerdetails).subscribe(data => {\n        console.log(data);\n        Swal.fire(name, 'Registered sucessfully ', 'success');\n      }, error => {});\n      return this.show;\n    } //get pdf\n\n\n    getpdf(id) {\n      console.log(\"test2 generate pdf came\");\n      console.log(id, \"pdf\");\n      return this.dataSource.getPdf(id).subscribe(response => {\n        console.log(\"test3 generate pdf came\");\n        saveAs(response, \"weekeendtrips\" + id + \".pdf\");\n      });\n    }\n\n    generatepdf() {\n      console.log(\"test1 generate pdf\");\n      this.getpdf(this.travellers[this.travellers.length - 1].travellerId);\n    } //save passenger\n\n\n    savePassenger(passenger) {\n      console.log(passenger);\n    } //save traveller\n\n\n    saveTraveller(traveller) {\n      Object.assign(this.currentTraveller, traveller);\n      this.traveller2 = traveller;\n      this.totalprice = this.currentTraveller.passenger.length * this.currentTraveller.packagePrice;\n      console.log(this.currentTraveller);\n      this.checkdate = traveller.journeyEndingDate.getDay;\n      this.noofpassengers = this.currentTraveller.passenger.length;\n      this.dataSource.saveTraveller(traveller).subscribe(e => this.travellers.push(e));\n    } //get traveller\n\n\n    gettraveller() {\n      console.log(this.currentTraveller);\n      return this.traveller2;\n    } //get cities pack and place\n\n\n    getCities() {\n      return this.cities;\n    }\n\n    getCity(id) {\n      return this.cities.find(c => c.cityId == id);\n    }\n\n    getPlaces(id) {\n      var _a;\n\n      console.log(id);\n      console.log(this.getpackage(id));\n      return (_a = this.getpackage(id)) === null || _a === void 0 ? void 0 : _a.places;\n    }\n\n    getPackages() {\n      return this.packages;\n    }\n\n    getpackage(refid) {\n      // this.pacrefid=refid;\n      // console.log(this.cities.find(e=>e.cityId==this.cityrefid)?.packages.find(e1=>e1.packageId==this.pacrefid))\n      // return (this.cities.find(e=>e.cityId==this.cityrefid)?.packages.find(e1=>e1.packageId==this.pacrefid))\n      // console.log(this.packages)\n      console.log(this.packages.find(e => e.packageId == refid));\n      return this.packages.find(e => e.packageId == refid);\n    }\n\n    getCityName(packageName) {\n      return \"\";\n    } //changing active inactive status for admin\n\n\n    removeCity(cityid) {\n      this.dataSource.deleteCity(cityid).subscribe(e => {\n        console.log(\"no error\");\n        console.log(e);\n        this.dataSource.getCities().subscribe(data => this.cities = data);\n      }, error => {\n        console.log(\"errors\");\n        this.cities.filter(c => c.cityId == cityid)[0].status;\n      });\n    }\n\n    removePlace(placeid) {\n      this.dataSource.deletePlace(placeid).subscribe();\n    }\n\n    removePack(packid) {\n      this.dataSource.deletePack(packid).subscribe();\n    } //saving city package and place for admin\n\n\n    saveCity(city) {\n      this.dataSource.saveCity(city).subscribe(data => {\n        this.cities.push(data);\n        Swal.fire('success', 'city added sucessfully ', 'success');\n      }, error => {\n        Swal.fire('', 'city not added  ', \"warning\");\n      });\n    }\n\n    savePlace(place, packid = 1) {\n      this.dataSource.savePlace(place, packid).subscribe(data => {\n        this.places.push(data);\n        Swal.fire('success', 'place added sucessfully ', 'success');\n      }, error => {\n        Swal.fire('', 'place not added  ', \"warning\");\n      });\n    }\n\n    savePack(packages, cityId) {\n      this.dataSource.savePack(packages, cityId).subscribe(data => {\n        var _a;\n\n        Swal.fire('success', 'package added sucessfully ', 'success');\n        this.packages.push(data);\n        console.log(this.cities.find(c => c.cityId == cityId));\n        (_a = this.cities.find(c => c.cityId == cityId)) === null || _a === void 0 ? void 0 : _a.packages.push(data); //error\n      }, error => {\n        Swal.fire('', 'package not added  ', \"warning\");\n      });\n    }\n\n    getid() {\n      if (this.getUser() != null) {\n        this.userId = this.getUser().id;\n      }\n\n      return this.userId;\n    }\n\n    getstatus() {\n      return this.logInSwap;\n    }\n\n    saveId(id) {\n      this.cityrefid = id;\n      console.log(id);\n    }\n\n    resetpassword(reset) {\n      reset.id = this.currentUser.userId;\n      console.log(reset.id);\n      this.dataSource.resetPassword(reset).subscribe(data => {\n        Swal.fire('Login now ', 'password changed sucessfully ', 'success');\n      }, error => {\n        Swal.fire('try again ', 'password incorrect ', 'error');\n      });\n    }\n\n    getcoupon() {\n      console.log(this.coupon);\n      return this.coupon;\n    }\n\n    bookingHistory(travellerMail) {\n      this.dataSource.bookingHistory(travellerMail).subscribe(data => {\n        this.bookingHistoryDetails = data;\n        console.log(this.bookingHistoryDetails);\n      });\n    }\n\n    changeStatusOfUserAdmin(email) {\n      let user = this.users.filter(e => e.email == email)[0];\n      return this.dataSource.changeStatusOfUserAdmin(email).subscribe(e => {\n        // this.users.splice(user.userId,1,e)\n        this.users.filter(e => e.email == email)[0].role = e.role;\n      });\n    }\n\n    paymentstatus(id, packprice) {\n      let userpaymentstatus = false;\n      this.dataSource.paymentstatus(id, packprice).subscribe(); // return this.userpaymentstatus\n\n      return true;\n    }\n\n  }\n\n  WeekendRepository.ɵfac = function WeekendRepository_Factory(t) {\n    return new (t || WeekendRepository)(i0.ɵɵinject(i1.WeekendRestData), i0.ɵɵinject(i2.MatSnackBar), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.JwtHelperService));\n  };\n\n  WeekendRepository.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WeekendRepository,\n    factory: WeekendRepository.ɵfac\n  });\n  return WeekendRepository;\n})();","map":null,"metadata":{},"sourceType":"module"}